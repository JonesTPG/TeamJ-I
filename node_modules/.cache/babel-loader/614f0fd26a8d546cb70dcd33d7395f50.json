{"ast":null,"code":"import _classCallCheck from \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joonas/LUT/programming/CodeCamp/TeamJ-I/src/components/selectedcourse.jsx\";\nimport React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\n\nvar axios = require(\"axios\");\n\nvar SelectedCourse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectedCourse, _Component);\n\n  function SelectedCourse(props) {\n    var _this;\n\n    _classCallCheck(this, SelectedCourse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectedCourse).call(this, props));\n\n    _this.getSelectedCourse = function () {\n      axios.get(\"/api/course/\" + _this.props.courseid).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        _this.setState({\n          selected: data\n        });\n      });\n    };\n\n    _this.getComments = function () {\n      axios.get(\"/api/comments/\" + _this.props.courseid).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        if (data.length === 0) {\n          _this.setState({\n            comments: null\n          });\n\n          return;\n        }\n\n        _this.setState({\n          comments: data\n        });\n      });\n    };\n\n    _this.state = {\n      selected: {},\n      //stores the currently selected course's information\n      comments: null //stores the comments related to selected course\n\n    };\n    return _this;\n  } //this component is dependent from the course id it gets, so we have to listen to\n  //possible changes\n\n\n  _createClass(SelectedCourse, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.courseid !== prevProps.courseid) {\n        this.getSelectedCourse();\n        this.getComments();\n      }\n    } //fetches the selected course's information from the server. the id is given to this component as a prop\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var id = this.props.courseid; //there is no course selected\n\n      if (id === null || id === \"\" || id === undefined) {\n        return React.createElement(\"p\", {\n          className: \"noCourseTxt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \"Valitse jokin kurssi\");\n      } //there are no comments, so don't render the comments list\n      else if (this.state.comments === null) {\n          return React.createElement(\"div\", {\n            className: \"selectedCourse\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"course-view\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          })), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, \"Kurssin rating: \", this.state.selected.rating), React.createElement(\"div\", {\n            className: \"comments-list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, \"Ei kommentteja.\"), React.createElement(\"div\", {\n            className: \"new-comment\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, React.createElement(NewComment, {\n            courseId: this.props.courseid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          })))));\n        } //course is selected and it has comments, display the information\n        else {\n            return React.createElement(\"div\", {\n              className: \"selectedCourse\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"course-view\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88\n              },\n              __self: this\n            }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n              },\n              __self: this\n            })), React.createElement(\"h4\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92\n              },\n              __self: this\n            }, \"Kurssin rating: \", this.state.selected.rating), React.createElement(\"div\", {\n              className: \"comments-list\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93\n              },\n              __self: this\n            }, React.createElement(\"ul\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 94\n              },\n              __self: this\n            }, this.state.comments.map(function (comment) {\n              return React.createElement(Comment, {\n                key: comment._id,\n                text: comment.text,\n                upvotes: comment.upvotes,\n                downvotes: comment.downvotes,\n                username: comment.username,\n                commentId: comment._id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 96\n                },\n                __self: this\n              });\n            }))), React.createElement(\"div\", {\n              className: \"new-comment\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109\n              },\n              __self: this\n            }, React.createElement(NewComment, {\n              courseId: this.props.courseid,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110\n              },\n              __self: this\n            }))));\n          }\n    }\n  }]);\n\n  return SelectedCourse;\n}(Component);\n\nexport default SelectedCourse;","map":{"version":3,"sources":["/home/joonas/LUT/programming/CodeCamp/TeamJ-I/src/components/selectedcourse.jsx"],"names":["React","Component","Comment","NewComment","axios","require","SelectedCourse","props","getSelectedCourse","get","courseid","then","response","data","JSON","parse","setState","selected","getComments","length","comments","state","prevProps","prevState","id","undefined","coursename","rating","map","comment","_id","text","upvotes","downvotes","username"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\n\nconst axios = require(\"axios\");\n\nclass SelectedCourse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: {}, //stores the currently selected course's information\n      comments: null //stores the comments related to selected course\n    };\n  }\n\n  //this component is dependent from the course id it gets, so we have to listen to\n  //possible changes\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.courseid !== prevProps.courseid) {\n      this.getSelectedCourse();\n      this.getComments();\n    }\n  }\n\n  //fetches the selected course's information from the server. the id is given to this component as a prop\n  getSelectedCourse = () => {\n    axios.get(\"/api/course/\" + this.props.courseid).then(response => {\n      let data = JSON.parse(response.data);\n      this.setState({\n        selected: data\n      });\n    });\n  };\n\n  getComments = () => {\n    axios.get(\"/api/comments/\" + this.props.courseid).then(response => {\n      let data = JSON.parse(response.data);\n      if (data.length === 0) {\n        this.setState({\n          comments: null\n        });\n        return;\n      }\n      this.setState({\n        comments: data\n      });\n    });\n  };\n\n  render() {\n    let id = this.props.courseid;\n\n    //there is no course selected\n    if (id === null || id === \"\" || id === undefined) {\n      return <p className=\"noCourseTxt\">Valitse jokin kurssi</p>;\n    }\n\n    //there are no comments, so don't render the comments list\n    else if (this.state.comments === null) {\n      return (\n        <div className=\"selectedCourse\">\n          <div className=\"course-view\">\n            <h3>\n              {this.state.selected.coursename} {this.state.selected.courseid}\n              <hr />\n            </h3>\n            <h4>Kurssin rating: {this.state.selected.rating}</h4>\n\n            <div className=\"comments-list\">\n              <p>Ei kommentteja.</p>\n\n              <div className=\"new-comment\">\n                <NewComment courseId={this.props.courseid} />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    //course is selected and it has comments, display the information\n    else {\n      return (\n\n       <div className=\"selectedCourse\">\n        <div className=\"course-view\">\n          <h3>\n              {this.state.selected.coursename} {this.state.selected.courseid}\n              <hr />\n            </h3>\n          <h4>Kurssin rating: {this.state.selected.rating}</h4>\n          <div className=\"comments-list\">\n            <ul>\n              {this.state.comments.map(comment => (\n                <Comment\n                  key={comment._id}\n                  text={comment.text}\n                  upvotes={comment.upvotes}\n                  downvotes={comment.downvotes}\n                  username={comment.username}\n                  commentId={comment._id}\n                />\n             \n                \n              ))}\n            </ul>\n          </div>\n          <div className=\"new-comment\">\n            <NewComment courseId={this.props.courseid} />\n       </div>\n\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default SelectedCourse;\n"]},"metadata":{},"sourceType":"module"}